# Developer: Shubh Savani (Added additional functions that adjusted the solve function to take in an 2D input list and output a 1D list 
# for the website to print out. Also, added functions to check if the inital puzzle is viable before solving)
# Designer of Backtracking Algorithm Implementation: Dante Sblendorio

import time
import numpy as np
import argparse


def shape_puzzles(collection):
    for ind in range(collection.shape[0]):
        collection.iloc[ind, 0] = np.reshape(list(collection.puzzle.values[ind]), (9, 9)).astype(int)
        collection.iloc[ind, 1] = np.reshape(list(collection.solution.values[ind]), (9, 9)).astype(int)
    return collection


def checkPuzzle(sudoku_puzzle):
    checkRow = all([all([x in sudoku_puzzle[nrow, :] for x in range(1, 10)]) for nrow in range(9)])
    checkCol = all([all([x in sudoku_puzzle[:, ncol] for x in range(1, 10)]) for ncol in range(9)])

    checkUpperLeft = all([x in sudoku_puzzle[0:3, 0:3] for x in range(1, 10)])
    checkUpperMid = all([x in sudoku_puzzle[0:3, 3:6] for x in range(1, 10)])
    checkUpperRight = all([x in sudoku_puzzle[0:3, 6:9] for x in range(1, 10)])

    checkMidLeft = all([x in sudoku_puzzle[3:6, 0:3] for x in range(1, 10)])
    checkMidMid = all([x in sudoku_puzzle[3:6, 3:6] for x in range(1, 10)])
    checkMidRight = all([x in sudoku_puzzle[3:6, 6:9] for x in range(1, 10)])

    checkLowerLeft = all([x in sudoku_puzzle[6:9, 0:3] for x in range(1, 10)])
    checkLowerMid = all([x in sudoku_puzzle[6:9, 3:6] for x in range(1, 10)])
    checkLowerRight = all([x in sudoku_puzzle[6:9, 6:9] for x in range(1, 10)])

    solved = all([checkRow, checkCol, checkUpperLeft, checkUpperMid, checkUpperRight,
                  checkMidLeft, checkMidMid, checkMidRight, checkLowerLeft, checkLowerMid, checkLowerRight])
    # if solved:
    #     for line in sudoku_puzzle:
    #         print(*line)
    return solved


def determineValues(sudoku_puzzle):
    puzzle_values = list()
    for r in range(9):
        for c in range(9):
            if sudoku_puzzle[r, c] == 0:
                cell_values = np.array(range(1, 10))
                cell_values = np.setdiff1d(cell_values,
                                           sudoku_puzzle[r, :][np.where(sudoku_puzzle[r, :] != 0)]).tolist()
                cell_values = np.setdiff1d(cell_values,
                                           sudoku_puzzle[:, c][np.where(sudoku_puzzle[:, c] != 0)]).tolist()
            else:
                cell_values = [sudoku_puzzle[r, c]]
            puzzle_values.append(cell_values)
    return puzzle_values


def checkGrids(r, c, sudoku_puzzle, n):
    if r < 3:
        if c < 3:
            subgrid = n in sudoku_puzzle[0:3, 0:3]
        elif c < 6:
            subgrid = n in sudoku_puzzle[0:3, 3:6]
        else:
            subgrid = n in sudoku_puzzle[0:3, 6:9]
    elif r < 6:
        if c < 3:
            subgrid = n in sudoku_puzzle[3:6, 0:3]
        elif c < 6:
            subgrid = n in sudoku_puzzle[3:6, 3:6]
        else:
            subgrid = n in sudoku_puzzle[3:6, 6:9]
    else:
        if c < 3:
            subgrid = n in sudoku_puzzle[6:9, 0:3]
        elif c < 6:
            subgrid = n in sudoku_puzzle[6:9, 3:6]
        else:
            subgrid = n in sudoku_puzzle[6:9, 6:9]
    return subgrid


def convert_2_1D_list(output_arr):
    output = []
    for row in range(len(output_arr)):
        for col in range(len(output_arr[row])):
            output.append(int(output_arr[row][col]))
    return output


def parse_rows(puzzle):
    rows = {}
    for row in range(len(puzzle)):
        rows[row] = [puzzle[row][col] for col in range(len(puzzle[row])) if puzzle[row][col] != 0]
    return rows


def parse_cols(puzzle):
    cols = {}
    for col in range(len(puzzle)):
        cols[col] = [puzzle[row][col] for row in range(len(puzzle[col])) if puzzle[row][col] != 0]
    return cols


def parse_blocks(puzzle):
    blocks = {0: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: []}
    for row in range(len(puzzle)):
        for col in range(len(puzzle[row])):
            value = puzzle[row][col]
            if value != 0:
                block_num = None
                if 0 <= row <= 2:
                    if 0 <= col <= 2:
                        block_num = 0
                    elif 3 <= col <= 5:
                        block_num = 1
                    elif 6 <= col <= 8:
                        block_num = 2
                elif 3 <= row <= 5:
                    if 0 <= col <= 2:
                        block_num = 3
                    elif 3 <= col <= 5:
                        block_num = 4
                    elif 6 <= col <= 8:
                        block_num = 5
                else:
                    if 0 <= col <= 2:
                        block_num = 6
                    elif 3 <= col <= 5:
                        block_num = 7
                    elif 6 <= col <= 8:
                        block_num = 8
                blocks[block_num].append(value)
    return blocks


def given_enough_clues(puzzle):
    num_clues = 0
    for row in range(len(puzzle)):
        for col in range(len(puzzle[row])):
            value = puzzle[row][col]
            if value != 0:
                num_clues += 1
    if 0 <= num_clues <= 16:
        return False
    return True


def is_viable(puzzle):
    if not given_enough_clues(puzzle):  # check if there are enough clues given for the algo to solve
        return False
    rows = parse_rows(puzzle)
    cols = parse_cols(puzzle)
    blocks = parse_blocks(puzzle)

    # check every unit to make sure there are no invalid inputs
    for row_ind in rows.keys():
        row = rows[row_ind]
        row.sort()
        for ind in range(len(row) - 1):
            curr_val = row[ind]
            next_val = row[ind + 1]
            if curr_val == next_val:
                return False
    for col_ind in cols.keys():
        col = cols[col_ind]
        col.sort()
        for ind in range(len(col) - 1):
            curr_val = col[ind]
            next_val = col[ind + 1]
            if curr_val == next_val:
                return False
    for block_ind in blocks.keys():
        block = blocks[block_ind]
        block.sort()
        for ind in range(len(block) - 1):
            curr_val = block[ind]
            next_val = block[ind + 1]
            if curr_val == next_val:
                return False
    return True


def solve(input_arr):
    # Added a section that checks if the given puzzle is even viable (before solving) -
    # saves time by not solving puzzles we know will be invalid based on given clues
    if not is_viable(input_arr):
        output = [-1] * 81
        return output
    sudoku_puzzle = np.empty((0, 9), int)  # set the sudoku puzzle to be an empty row that can be
    # added onto using numPy append method
    for row_ind in range(len(input_arr)):  # adds rows to numPy array from input array
        row_values = input_arr[row_ind]
        row_arr = np.array([])
        for value in row_values:
            row_arr = np.append(row_arr, [value])
        sudoku_puzzle = np.append(sudoku_puzzle, [row_arr], axis=0)
    puzzle_values = determineValues(sudoku_puzzle)  # determines viable values from the sudoku_puzzle array

    count = 0
    solution = False
    rows = np.array(np.where(sudoku_puzzle == 0))[0]
    cols = np.array(np.where(sudoku_puzzle == 0))[1]
    dic = dict(zip(list(range(len(rows))), np.zeros(len(rows), dtype=int).tolist()))
    while not solution:
        if count >= len(rows):
            solution = checkPuzzle(sudoku_puzzle)
            break
        r = rows[count]
        c = cols[count]
        len_num = len(np.array(puzzle_values).reshape(9, 9)[r, c])
        num = dic[count]
        while num < len_num:
            cell = np.array(puzzle_values).reshape(9, 9)[r, c][num]
            checkRow = cell in sudoku_puzzle[r, :]
            if checkRow:
                num += 1
                continue
            checkCol = cell in sudoku_puzzle[:, c]
            if checkCol:
                num += 1
                continue
            checkGrid = checkGrids(r, c, sudoku_puzzle, cell)
            if checkGrid:
                num += 1
                continue
            dic[count] = num
            count += 1
            sudoku_puzzle[r, c] = cell
            break
        else:
            sudoku_puzzle[r, c] = 0
            dic[count] = 0
            count -= 1

    is_solved = checkPuzzle(sudoku_puzzle) # checks if the puzzle has a valid solution
    if is_solved:
        output = convert_2_1D_list(sudoku_puzzle)
    else:
        output = [-1] * 81
    return output  # returns 1D array of values for the website to process (in app.py)


# def file_reader(file_name):
#     puzzle = []
#     file = open(file_name)
#     valid_inputs = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
#     for ind in range(9):
#         line = file.readline()
#         row = line.split()
#         puzzle.append(row)
#     #  convert each value in puzzle from a string to an integer
#     for row in range(len(puzzle)):
#         for col in range(len(puzzle[row])):
#             val_str = puzzle[row][col]
#             if val_str not in valid_inputs:
#                 raise ValueError("Input must be an integer from 0 to 9")
#             puzzle[row][col] = int(val_str)
#     input_array = np.array([puzzle[0], puzzle[1], puzzle[2], puzzle[3], puzzle[4], puzzle[5], puzzle[6], puzzle[7], puzzle[8]])
#     return input_array

def file_reader(file_name):
    puzzle = []
    file = open(file_name)
    valid_inputs = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    for ind in range(9):
        line = file.readline()
        row = line.split()
        puzzle.append(row)
    #  convert each value in puzzle from a string to an integer
    for row in range(len(puzzle)):
        for col in range(len(puzzle[row])):
            val_str = puzzle[row][col]
            if val_str not in valid_inputs:
                raise ValueError("Input must be an integer from 0 to 9")
            puzzle[row][col] = int(val_str)

    return puzzle


def main():
    # Get the input file from the cmd command
    parser = argparse.ArgumentParser(description='Solve Sudoku Puzzle with Backtracking Algorithm '
                                                 'with MRV/degree heuristics and RGB order')
    parser.add_argument('filename', help='The input file containing the initial and goal state')
    cmdline = parser.parse_args()
    file_name = cmdline.filename

    # Parses the file and creates a 2D array that stores each cell as an int value and handles error inputs
    # sudoku_puzzle = np.array([[8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 6, 0, 0, 0, 0, 0], [0, 7, 0, 0, 9, 0, 2, 0, 0],
    #                           [0, 5, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 4, 5, 7, 0, 0], [0, 0, 0, 1, 0, 0, 0, 3, 0],
    #                           [0, 0, 1, 0, 0, 0, 0, 6, 8], [0, 0, 8, 5, 0, 0, 0, 1, 0], [0, 9, 0, 0, 0, 0, 4, 0, 0]])
    # sudoku_puzzle_2 = np.array([[7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 3, 0, 0], [0, 3, 0, 5, 2, 1, 0, 0, 9],
    #                           [0, 0, 8, 1, 0, 5, 0, 3, 0], [4, 0, 0, 0, 9, 0, 0, 0, 7], [0, 1, 0, 3, 0, 4, 5, 0, 0],
    #                           [6, 0, 0, 7, 3, 8, 0, 1, 0], [0, 0, 1, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3]])
    # sudoku_puzzle = file_reader(file_name)
    input_arr = file_reader(file_name)
    # sudoku_df = pd.DataFrame(pd.read_csv('sudoku.csv', nrows=100))  # imports first 100 puzzles and solutions
    # # for training/testing
    # shaped_puzzles = shape_puzzles(sudoku_df)
    start = time.perf_counter()
    # puzzle_vals = determineValues(sudoku_puzzle)
    print(solve(input_arr))
    end = time.perf_counter()
    total_time = end - start
    print("Runtime: ", total_time)
    # print(puzzle_vals)
    # print(shaped_puzzles.iloc[0, 0])
    # print(shaped_puzzles.iloc[0, 1])


if __name__ == '__main__':
    main()
